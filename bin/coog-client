# vim: set ft=sh:
# client management - start, stop, log, etc.

_coog_client_file() {
        echo "$COOG_TMP/$COOG_FILE_CLI.$1"
}

coog_client_launch() { # launch - [tryton args]
        tryton -c "$COOG_CONF_CLI" "$@"
}

coog_client_debug() { # launch in pdb - [tryton args]
        python -m pdb "$COOG_TRYTON/bin/tryton" -c "$COOG_CONF_CLI" "$@"
}

coog_client_start() { # start - [tryton args]
        local pid_file; pid_file=$(_coog_client_file pid)
        local out_file; out_file=$(_coog_client_file out)
        local pid; pid=$(coog_env_pid "$pid_file" 2> /dev/null) &&
                >&2 echo "already running" && return 1
        coog_env_bak "$out_file" "$pid" || return $?
        local args
        args=--dev
        if [ $# -eq 0 ]
        then
                args="$args -l $LOG_LEVEL"
        else
                args="$args $*"
        fi
        tryton -c "$COOG_CONF_CLI" $args &> "$out_file" &
        echo "$!" > "$pid_file"
        echo client started
}

coog_client_stop() { # stop
        local pid_file; pid_file=$(_coog_client_file pid)
        local out_file; out_file=$(_coog_client_file out)
        local pid; pid=$(coog_env_term "$pid_file") || return $?
        coog_env_bak "$out_file" "$pid"
        echo client stopped
}

coog_client_kill() { # kill
        coog_client_pid | xargs kill -9 &> /dev/null
        echo client killed
}

coog_client_restart() { # kill + start - [trytond args]
        coog_client_kill
        coog_client_start $*
}

coog_client_pid() { # get pid
        local pid_file; pid_file=$(_coog_client_file pid)
        coog_env_pid "$pid_file"
}

coog_client_log() { # less logs - [less args]
        local out_file; out_file=$(_coog_client_file out)
        less "$@" "$out_file"
}

coog_client_head() { # head logs - [head args]
        local out_file; out_file=$(_coog_client_file out)
        head "$@" "$out_file"
}

coog_client_tail() { # tail logs - [tail args]
        local out_file; out_file=$(_coog_client_file out)
        tail "$@" "$out_file"
}

coog_client_po() { # update client po file from source code [lang]
        [ -z "$1" ] && echo needs language to update - example: fr && return 1
        ( cd "$COOG_TRYTON" &&
                python ./setup.py extract_messages --no-location --omit-header &&
                python ./setup.py update_catalog --ignore-obsolete=true -l "$1" &&
                find -name "*.pot" -delete )
}

coog_client_mo() { # generates mo file in client [lang]
        [ -z "$1" ] && echo needs language to generate - example: fr && return 1
        ( cd "$COOG_TRYTON" && python ./setup.py compile_catalog --locale "$1" )
}
