# vim: set ft=sh:
# base management - anonymize, etc

_get_anon_queries() {
    [ -z "$1" ] && echo -e "please provide an anonymization level: 1, 2, or 3" && return 1
    level=$1
    script_path="$COOG_ROOT/coog/modules/coog_core/scripts/"
    scripts_files="$script_path""anonymize_procedures.sql"
    scripts_files="$scripts_files"" $script_path""anonymize_level_2.sql"
    [ $level -lt 2 ] && scripts_files="$scripts_files"" $script_path""anonymize_level_1.sql"
    [ $level -lt 1 ] && scripts_files="$scripts_files"" $script_path""anonymize_level_0.sql"
    scripts_files="$scripts_files"" $script_path""anonymize_remove_procedures.sql"
    cat $scripts_files
}

_check_anon_args() {
    anon_help="
    Please provide an anonymization level:

    2 : personal data are anonymized
    1 : structuring business data are also anonymized
    0 : business identifiers are also anonymized
    "

    [ -z "$1" ] && echo -e "$anon_help" && return 1
    [ -z "$DB_NAME" ] && echo no database defined && return 1
    [ -z "$PGUSER" ] && echo no pg user defined && return 1
    return 0
}

coog_db_anondump() { # Creates an anonymized dump of database DB_NAME - <level> [dump path]

    _check_anon_args $@ || return 1
    [ -z "$2" ] && dump_path="/tmp" || dump_path=$(readlink -f $2)
    level=$1
    stamp=$(date +%Y-%m-%d_%Hh%M)
    copy_name=anon_"$DB_NAME"_"$stamp"
    queries=$(_get_anon_queries $level) || return 1

    createdb -e -U $PGUSER $copy_name -T $DB_NAME || return 1

    echo "Anonymizing $copy_name"
    psql -U $PGUSER -d $copy_name 2>&1 > /dev/null << EOF
    $queries
EOF

    echo "Dumping $copy_name"
    full_path="$dump_path/""$copy_name"".dump"
    pg_dump -U $PGUSER -d $copy_name -Fc > $full_path
    dropdb -e -U $PGUSER $copy_name
    echo "Anonymized database dumped to $full_path"
}

coog_db_anonbase() { # Anonymize database DB_NAME - <level>
    _check_anon_args $@ || return 1
    level=$1
    queries=$(_get_anon_queries $level) || return 1

    psql -U $PGUSER -d $DB_NAME << EOF
    $queries
EOF

    echo "anonymized database $DB_NAME at level $level"
}

coog_db_demo() { # Create a demo database
    demo_help="
    Creates a demo database from the new_db script located in
    modules/global_tests/tests.

    Configuration can be controlled with the following env variables :

    - GEN_COOG_USER : User name to connect to (in the case of an existing
        database)
    - GEN_COOG_PASSWORD : User password to use for connection, or password for
        the admin user for a new database, default 'admin'

    - GEN_DB_NAME : The name of the database to work on, default 'generated'

    - GEN_CREATE_NEW_DB : If True, the database will be dropped if it exists,
        then recreated from scratch
    - GEN_RESTORE_DB : If True, the database will be restored from an existing
        template, useful when working on the script
    - GEN_RESTORE_FROM : The name of the database to restore from

    - GEN_BASIC_INIT : If True, basic initialization of the database will be
        done
    - GEN_LOAD_ZIP_CODES : If True, zip codes will be loaded from the
        associated test cases
    - GEN_LOAD_BANKS : If True, banks will be created from the test case
        referential
    - GEN_LOAD_ACCOUNTING : If True, a default accounting will be created
    - GEN_CREATE_PROCESSES : If True, processes will be created from scratch
    - GEN_CREATE_ACTORS : If True, actors (insurer, brokers, etc) will be
        created
    - GEN_CREATE_PRODUCTS : If True, some default products will be created
    - GEN_CREATE_COMMISSION_CONFIG' : If True, commission plans for insurer /
        brokers will be generated
    - GEN_CREATE_CONTRACTS : If True, contracts will be subscribed on all
        available products
    - GEN_BILL_CONTRACTS : If True, contracts will be billed, paid, and
        commissionned
    "
    if [ "$1" = "help" ]; then
        echo -e "$demo_help" && return 1
    fi
    coog env run python "$COOG_COOG"/modules/global_tests/tests/new_db.py
}
