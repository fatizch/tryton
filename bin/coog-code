# vim: set ft=sh:
# source code informations

_coog_code_st() {
        [ -z $1 ] && echo 0 && return
        echo $1 | cut -d " " -f 1
}

_coog_code_status() {
        local wd; wd=`pwd`
        cd $COOG_ROOT
        local repos; repos=`ls -1`
        echo "repo master branch commit stage dirty"
        echo "---- ------ ------ ------ ----- -----"
        for repo in $repos
        do
                local folder; folder=$COOG_ROOT/$repo
                if [ ! -d $folder ] || [ ! -d $folder/.git ]
                then
                        continue
                fi
                cd $folder
                local master
                master=`git diff --shortstat origin/master master`
                master=`_coog_code_st $master`
                local branch
                branch=`git rev-parse --abbrev-ref HEAD`
                [ $branch = HEAD ] && branch=X
                local commit
                if [ $branch = master ]
                then
                        commit=X
                else
                        commit=`git diff --shortstat master`
                        commit=`_coog_code_st $master`
                fi
                local stage
                stage=`git diff --shortstat --cached`
                stage=`_coog_code_st $stage`
                local dirty
                dirty=`git diff --shortstat`
                dirty=`_coog_code_st $dirty`
                echo $repo $master $branch $commit $stage $dirty
        done
        cd $wd
}

coog_code_status() { # status of all repos
        _coog_code_status | column -t
}

coog_code_fetch() { # fetch all repos
        local wd; wd=`pwd`
        cd $COOG_ROOT
        local repos; repos=`ls -1`
        for repo in $repos
        do
                local folder; folder=$COOG_ROOT/$repo
                if [ ! -d $folder ] || [ ! -d $folder/.git ]
                then
                        continue
                fi
                cd $folder
                echo fetching $repo
                git fetch -p
                echo
        done
        cd $wd

}

coog_code_norem() { # list local branches with no remotes - <repo>
        [ -z $1 ] && echo missing repo && return 1
        local wd; wd=`pwd`
        local folder; folder=$COOG_ROOT/$1
        if [ ! -d $folder ] || [ ! -d $folder/.git ]
        then
                echo not a repo && return 1
        fi
        cd $folder
        git branch -l | sed 's/* master//' > /tmp/gitlocal.txt
        git branch -r  | sed 's/origin\///' > /tmp/gitremote.txt
        grep -Fxv -f /tmp/gitremote.txt /tmp/gitlocal.txt
        cd $wd
}

_coog_code_lines() {
        find -name "*.$1" -exec wc -l {} \; | cut -d " " -f 1 | paste -s -d "+" | bc
}

_coog_code_stats() {
        [ -z $1 ] && echo need a repo to calculate stats && return 1
        local modules
        modules="$COOG_ROOT/$1/modules"
        [ ! -d "$modules" ] && echo bad repo name && return 1
        local wd
        wd=`pwd`
        cd "$modules"
        echo module python xml
        local module
        for module in `ls -1`
        do
                [ ! -d $module ] && continue
                cd $module
                local py
                py=`_coog_code_lines py`
                local xml
                xml=`_coog_code_lines xml`
                echo $module $py $xml
                cd ..
        done
        cd "$wd"
}

coog_code_stats() { # generate code stats - <repo>
        _coog_code_stats $* | column -t
}
