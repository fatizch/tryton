# vim: set ft=sh:
# rq - workers management

_coog_rq_file() {
        echo "$COOG_TMP/$COOG_FILE_RQ-$1.$2"
}

coog_rq_start() { # start worker - <wid> [queue +]
        [ $# -lt 2 ] && >&2 echo "missing arguments" && return 1
        [ "$1" -eq "$1" ] 2>/dev/null || { echo "argument must be an integer"; return 1; }
        local wid; wid=$1; shift
        local pid_file; pid_file=$(_coog_rq_file "$wid" pid)
        local out_file; out_file=$(_coog_rq_file "$wid" out)
        local pid; pid=$(coog_env_pid "$pid_file" 2> /dev/null) &&
                >&2 echo "already running" && return 1
        coog_env_bak "$out_file" "$pid" || return $?
        rq worker \
                -u "$TRYTOND_ASYNC_RQ" \
                -n "coog-$wid" \
                --pid "$pid_file" "$@" &> "$out_file" &
        echo rq started
}

coog_rq_stop() { # stop worker - <wid>
        [ -z "$1" ] && >&2 echo needs worker id to stop && return 1
        local pid_file; pid_file=$(_coog_rq_file "$1" pid)
        local out_file; out_file=$(_coog_rq_file "$1" out)
        local pid; pid=$(coog_env_term "$pid_file") || return $?
        coog_env_bak "$out_file" "$pid"
        echo rq stopped
}

coog_rq_pid() { # get pid - <wid>
        [ -z "$1" ] && >&2 echo needs worker id to stop && return 1
        local pid_file; pid_file=$(_coog_rq_file "$1" pid)
        coog_env_pid "$pid_file"
}

coog_rq_cli() { # rq cli wrapper - <rq args>
        local cmd; cmd=$1; shift
        rq "$cmd" -u "$TRYTOND_ASYNC_RQ" "$@"
}

coog_rq_info() { # print workers infos
        coog_rq_cli info
}

coog_rq_queued() { # count queued jobs - <name>
        [ -z "$1" ] && >&2 echo missing queue name && return 1
        local q; q=$(coog_rq_cli info -r -Q "$1" | grep -oP "\d+$")
        local wk; wk=$(coog_rq_cli info -r -W "$1" | grep -c "busy")
        echo $((q+wk))
}

coog_rq_log() { # less logs - <wid> [less args]
        [ -z "$1" ] && >&2 echo needs worker id && return 1
        local wid; wid=$1; shift
        local out_file; out_file=$(_coog_rq_file "$wid" out)
        less "$@" "$out_file"
}

coog_rq_head() { # head logs - <wid> [head args]
        [ -z "$1" ] && >&2 echo needs worker id && return 1
        local wid; wid=$1; shift
        local out_file; out_file=$(_coog_rq_file "$wid" out)
        head "$@" "$out_file"
}

coog_rq_tail() { # tail logs - <wid> [tail args]
        [ -z "$1" ] && >&2 echo needs worker id && return 1
        local wid; wid=$1; shift
        local out_file; out_file=$(_coog_rq_file "$wid" out)
        tail "$@" "$out_file"
}
