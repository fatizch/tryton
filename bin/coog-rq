# vim: set ft=sh:
# rq - workers management

_coog_rq_file() {
        echo "$COOG_TMP/$COOG_FILE_RQ-$1.$2"
}

coog_rq_start() { # start worker - <wid> [queue +]
        [ $# -lt 1 ] && >&2 echo "missing arguments" && return 1
        local wid; wid=$1; shift
        local out_file; out_file=$(_coog_rq_file "$wid" out)

        if [ -z "$1" ]; then
            queue="$(python -W ignore $COOG_BIN/load_batches.py | tr '\n' ' ' 2> /dev/null)"
        else
            queue="$@"
            if [ "$1" = test ]
            then
                unset DB_NAME
            fi
        fi
        coog_env_bak "$out_file" "$pid" || return $?
        rq worker \
                --burst \
                -u "$TRYTOND_ASYNC_RQ" \
                -n "coog-$wid" "$@" &> "$out_file" &
        echo rq started
}

coog_rq_cli() { # rq cli wrapper - <rq args>
        local cmd; cmd=$1; shift
        rq "$cmd" -u "$TRYTOND_ASYNC_RQ" "$@"
}

coog_rq_info() { # print workers infos
        coog_rq_cli info
}

coog_rq_queued() { # count queued jobs - <name>
        [ -z "$1" ] && >&2 echo missing queue name && return 1
        local q; q=$(coog_rq_cli info -r -Q "$1" | cut -d " " -f 3)
        local wk; wk=$(coog_rq_cli info -r -W "$1" | grep -c "busy")
        echo $((q+wk))
}

coog_rq_log() { # less logs - <wid> [less args]
        [ -z "$1" ] && >&2 echo needs worker id && return 1
        local wid; wid=$1; shift
        local out_file; out_file=$(_coog_rq_file "$wid" out)
        less "$@" "$out_file"
}

coog_rq_head() { # head logs - <wid> [head args]
        [ -z "$1" ] && >&2 echo needs worker id && return 1
        local wid; wid=$1; shift
        local out_file; out_file=$(_coog_rq_file "$wid" out)
        head "$@" "$out_file"
}

coog_rq_tail() { # tail logs - <wid> [tail args]
        [ -z "$1" ] && >&2 echo needs worker id && return 1
        local wid; wid=$1; shift
        local out_file; out_file=$(_coog_rq_file "$wid" out)
        tail "$@" "$out_file"
}
