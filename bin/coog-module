# vim: set ft=sh:
# modules management - install, update, etc

coog_module_main() { # list installed modules - <db> - default: db uri
        [ ! -z $1 ] && PGDATABASE=$1
        local module
        for module in `psql -w -t -c "select name from ir_module where state='installed'"`
        do
                echo $module
        done
}

coog_module_update() { # install / update modules - [modules] - default: all
        [ -z $DB_NAME ] && echo no database defined && return
        local modules
        if [ $# -eq 0 ]
        then
                modules=ir
        else
                modules=$*
        fi
        _coog_server_cleancache
        trytond-admin -v \
                -c $COOG_CONF_SRV \
                -d $DB_NAME \
                -u $modules
}

coog_module_check() { # check if module is installed - <module>
        psql -w -t -c "select name from ir_module where name='$1' and state='installed'" | sed '/^\s*$/d' | wc -l
}

coog_module_list() { # list installed module from repo - <repo>
        local modules_folder
        modules_folder=$COOG_ROOT/$1/modules
        for module in $modules_folder/*
        do
                [ ! -d $module ] && continue
                local m
                m=`basename "$module"`
                local i
                i=`coog_module_check $m`
                [ $i -eq 1 ] && echo $m
        done
}

coog_module_translate() { # generate module translations
        local args
        if [ -z $1 ]
        then
                args="-m "`coog_module_list coog`
        else
                args=$*
        fi
        python $COOG_BIN/translate.py -c $COOG_CONF_SRV -p $COOG_TRYTOND/trytond/modules $args
}

coog_module_updatedb() { # install / update database modules - <database> [modules] - default is all
        [ -z $1 ] && echo no given database && return
        local db; db=$1; shift
        local args
        if [ -z $1 ]
        then
                args='--all'
        else
                args='-u '$*
        fi
        trytond-admin -v \
                -c $COOG_CONF_SRV \
                -d $db \
                $args
}

coog_module_create() { # creates a new module in the modules folder - <module_name> <file_1> [file_2] etc.
        [ -z $1 ] && echo No module name && return 1
        [ -z $2 ] && echo No main file && return 1
        local module_folder
        module_folder=$COOG_BIN/../../modules/$1
        [ -d $module_folder ] && echo Module $1 already exists && return 1

        local module_name
        module_name=$1
        shift
        local filenames
        filenames=$*

        # Create folders
        mkdir $module_folder
        mkdir $module_folder/view
        mkdir $module_folder/locale
        mkdir $module_folder/tests
        mkdir $module_folder/doc
        mkdir $module_folder/doc/fr
        touch $module_folder/doc/fr/features.rst
        touch $module_folder/doc/fr/index.rst
        touch $module_folder/doc/fr/summary.rst

        # Init tryton.cfg
        echo "[tryton]" > $module_folder/tryton.cfg
        echo "depends:" >> $module_folder/tryton.cfg
        echo "    ir" >> $module_folder/tryton.cfg
        echo "    res" >> $module_folder/tryton.cfg
        echo "    cog_utils" >> $module_folder/tryton.cfg
        echo "xml:" >> $module_folder/tryton.cfg
        for filename in $filenames
        do
            echo "    $filename.xml" >> $module_folder/tryton.cfg
        done

        # Init __init__.py
        echo "from trytond.pool import Pool" > $module_folder/__init__.py
        for filename in $filenames
        do
            echo "from .$filename import *" >> $module_folder/__init__.py
        done
        echo "" >> $module_folder/__init__.py
        echo "" >> $module_folder/__init__.py
        echo "def register():" >> $module_folder/__init__.py
        echo "    Pool.register(" >> $module_folder/__init__.py
        echo "        module='$module_name', type_='model')" >> $module_folder/__init__.py

        # Init xml
        for filename in $filenames
        do
            echo "<?xml version=\"1.0\"?>" > $module_folder/$filename.xml
            echo "<tryton>" >> $module_folder/$filename.xml
            echo "    <data>" >> $module_folder/$filename.xml
            echo "    </data>" >> $module_folder/$filename.xml
            echo "</tryton>" >> $module_folder/$filename.xml
        done

        # Init py
        for filename in $filenames
        do
            echo "from trytond.pool import PoolMeta" > $module_folder/$filename.py
            echo "" >> $module_folder/$filename.py
            echo "__metaclass__ = PoolMeta" >> $module_folder/$filename.py
            echo "__all__ = [" >> $module_folder/$filename.py
            echo "    ]" >> $module_folder/$filename.py
        done

        # Init CHANGELOG
        echo "* Module creation" > $module_folder/CHANGELOG

        # Init Tests
        echo "from .test_module import suite" > $module_folder/tests/__init__.py
        echo "import unittest" > $module_folder/tests/test_module.py
        echo "" >> $module_folder/tests/test_module.py
        echo "import trytond.tests.test_tryton" >> $module_folder/tests/test_module.py
        echo "from trytond.modules.cog_utils import test_framework" >> $module_folder/tests/test_module.py
        echo "" >> $module_folder/tests/test_module.py
        echo "" >> $module_folder/tests/test_module.py
        echo "class ModuleTestCase(test_framework.CoopTestCase):" >> $module_folder/tests/test_module.py
        echo "    'Module Test Case'" >> $module_folder/tests/test_module.py
        echo "" >> $module_folder/tests/test_module.py
        echo "    module = '$module_name'" >> $module_folder/tests/test_module.py
        echo "" >> $module_folder/tests/test_module.py
        echo "" >> $module_folder/tests/test_module.py
        echo "def suite():" >> $module_folder/tests/test_module.py
        echo "    suite = trytond.tests.test_tryton.suite()" >> $module_folder/tests/test_module.py
        echo "    suite.addTests(unittest.TestLoader().loadTestsFromTestCase(" >> $module_folder/tests/test_module.py
        echo "        ModuleTestCase))" >> $module_folder/tests/test_module.py
        echo "    return suite" >> $module_folder/tests/test_module.py

        # Init index.rst
        echo ".. MAIN_TOPIC" >> $module_folder/doc/fr/index.rst
        echo "" >> $module_folder/doc/fr/index.rst
        echo "MAIN TOPIC - Module Topic" >> $module_folder/doc/fr/index.rst
        echo "=========================" >> $module_folder/doc/fr/index.rst
        echo "" >> $module_folder/doc/fr/index.rst
        echo "Résumé" >> $module_folder/doc/fr/index.rst
        echo "------" >> $module_folder/doc/fr/index.rst
        echo "" >> $module_folder/doc/fr/index.rst
        echo ".. include:: summary.rst" >> $module_folder/doc/fr/index.rst
        echo "" >> $module_folder/doc/fr/index.rst
        echo "" >> $module_folder/doc/fr/index.rst
        echo ".. toctree::" >> $module_folder/doc/fr/index.rst
        echo "    :hidden:" >> $module_folder/doc/fr/index.rst
        echo "" >> $module_folder/doc/fr/index.rst
        echo "    summary.rst" >> $module_folder/doc/fr/index.rst

        # Init translation file
        echo "#" > $module_folder/locale/fr_FR.po
        echo 'msgid ""' >> $module_folder/locale/fr_FR.po
        echo 'msgstr "Content-Type: text/plain; charset=utf-8\n"' >> $module_folder/locale/fr_FR.po
}
