# vim: set ft=sh:
# server management - start, stop, log, etc.

_coog_server_file() {
        echo "$COOG_TMP/$COOG_FILE_SRV.$1"
}

coog_server_clearcache() { # clear redis cache
        coog_redis_exec cache flushdb &> /dev/null
        [ $? -eq 0 ] && echo redis cache cleared
        find "$COOG_ROOT" -name "*.pyc" -delete
        [ $? -eq 0 ] && echo pyc files cleared
        for repo in $(coog_repo_main)
        do
            find "$COOG_ROOT/$repo/modules" -type d -empty -delete
        done
}

coog_server_launch() { # launch - [trytond args]
        local args
        [ ! -z "$DB_NAME" ] && args="$args -d $DB_NAME"
        [ ! -z "$COOG_CONF_LOG" ] && args="$args --logconf $COOG_CONF_LOG"
        args="$args $*"
        coog_server_clearcache
        trytond -c "$COOG_CONF_SRV" $args &
        echo "$!" > "$COOG_TMP/$COOG_FILE_WATCH"
}

coog_server_debug() { # launch in pdb - [trytond args]
        local args
        args=$*
        [ ! -z "$DB_NAME" ] && args="$args -d $DB_NAME"
        coog_server_clearcache
        python -m pdb "$COOG_TRYTOND/bin/trytond" -c "$COOG_CONF_SRV" $args
}

coog_server_start() { # start - [trytond args]
        local pid_file; pid_file=$(_coog_server_file pid)
        local out_file; out_file=$(_coog_server_file out)
        local pid; pid=$(coog_env_pid "$pid_file" 2> /dev/null) &&
                >&2 echo "already running" && return 1
        coog_env_bak "$out_file" "$pid" || return $?
        "$COOG_BIN/watch" "$COOG_TRYTOND" coog server launch &> "$out_file" &
        echo "$!" > "$pid_file"
        echo server started
}

coog_server_stop() { # stop
        local pid_file; pid_file=$(_coog_server_file pid)
        local out_file; out_file=$(_coog_server_file out)
        local pid; pid=$(coog_env_term "$pid_file") || return $?
        coog_env_bak "$out_file" "$pid"
        echo server stopped
}

coog_server_kill() { # kill
        coog_server_pid | xargs kill -9 &> /dev/null
        echo server killed
}

coog_server_pid() { # get pid
        local pid_file; pid_file=$(_coog_server_file pid)
        local pid1; pid1=$(coog_env_pid "$pid_file") || return $?
        local pid2; pid2=$(cat "$COOG_TMP/$COOG_FILE_WATCH")
        echo "$pid1" "$pid2"
}

coog_server_log() { # less logs - [less args]
        local out_file; out_file=$(_coog_server_file out)
        less "$@" "$out_file"
}

coog_server_head() { # head logs - [head args]
        local out_file; out_file=$(_coog_server_file out)
        head "$@" "$out_file"
}

coog_server_tail() { # tail logs - [tail args]
        local out_file; out_file=$(_coog_server_file out)
        tail "$@" "$out_file"
}

coog_server_test() { # call for test - [curl args]
        local uri
        uri=$(python "$COOG_BIN/parse-config.py" web listen < "$COOG_CONF_SRV")
        [ $? -ne 0 ] && >&2 echo no rpc url && return 1
        curl "$@" \
                -X POST \
                -H "Content-Type: application/json" \
                -d '{"method": "common.server.version", "params": [null, null]}' \
                "$uri"
        echo
}
