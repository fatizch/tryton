# vim: set ft=sh:
# test management

_coog_test_enter() { # set test context
        TRYTOND_CONFIG=$COOG_CONF_TEST
        [ -z $TRYTOND_CONFIG ] && echo "missing conf file" && return 1
        export TRYTOND_CONFIG
        TRYTOND_DATABASE_URI=`python2 .py/parse-config.py database uri < $COOG_CONF_TEST`
        [ $? -ne 0 ] && echo "failed to parse conf file" && return 1
        [ -z $TRYTOND_DATABASE_URI ] && echo "db uri is empty" && return 1
        export TRYTOND_DATABASE_URI
        export DB_NAME="test_"`date +%s%N`
        export DO_NOT_TEST_CASES=1
}

_coog_test_exec() {
        run-tests.py -c $TRYTOND_CONFIG -vv -m $*
}

_coog_test_leave() { # clean test config
        coog_test_dropdb $DB_NAME
}

coog_test_dropdb() { # drop db from test database - <db>
        local db_vars
        db_vars=`echo $TRYTOND_DATABASE_URI | python2 .py/parse-url.py`
        [ $? -ne 0 ] && echo "failed to parse db uri" && return 1
        local db_sys
        db_sys=`echo "$db_vars" | sed -n 1p`
        if [ "$db_sys" == "sqlite" ]
        then
                local db_path
                db_path=`python2 .py/parse-config.py database path < $COOG_CONF_TEST`
                [ $? -ne 0 ] && echo "failed to parse conf file" && return 1
                local db_full_path
                db_full_path="$db_path"/"$1".sqlite
                [ -f $db_full_path ] && rm -vf $db_full_path
        elif [ "$db_sys" == "postgresql" ]
        then
                PGHOST=`echo "$db_vars" | sed -n 2p`
                [ ! -z $PGHOST ] && export PGHOST
                PGPORT=`echo "$db_vars" | sed -n 3p`
                [ ! -z $PGPORT ] && export PGPORT
                PGUSER=`echo "$db_vars" | sed -n 4p`
                [ ! -z $PGUSER ] && export PGUSER
                PGPASSWORD=`echo "$db_vars" | sed -n 5p`
                [ ! -z $PGPASSWORD ] && export PGPASSWORD
                dropdb -e $1 && return
        fi
}

coog_test_py() { # launch py.test on a module - <module> - all (further args are fwded to py.test)
        [ $# -eq 0 ] && echo needs module name to test && return
        _coog_test_enter
        local old_wd
        old_wd=`pwd`
        cd ../../trytond/trytond/modules
        local module
        module=$1
        shift 1
        if [ ! -d $module ]
        then
                echo module not found && cd $old_wd && return
        fi
        py.test $module --ignore=$module/test_case.py --doctest-glob=scenario*.rst $*
        cd $old_wd
        _coog_test_leave
}

coog_test_main() { # launch unit tests on a module - <module> - default: all
        _coog_test_enter || return $?
        _coog_test_exec $*
        _coog_test_leave
}
