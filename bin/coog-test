# vim: set ft=sh:
# test management

coog_test_manual() { # interactively launch tests - <module> - default: all
        unset TRYTOND_CONFIG
        unset DB_NAME
        unset TRYTOND_CACHE_REDIS
        run-tests.py -c $COOG_CONF_TEST -vv -m $*
}

_coog_test_modules() { # list all linked modules
        for f in $COOG_TRYTOND/trytond/modules/*
        do
                [ -d $f ] && basename $f
        done
}

coog_test_generate() { # generate test jobs - [module*]
        local modules
        if [ $# -eq 0 ]
        then
                modules=`_coog_test_modules`
        else
                modules=$*
        fi
        python $COOG_BIN/test-generate.py $modules
}

coog_test_start() { # start test workers - <concurrency>
        [ -z $1 ] && echo missing workers number && return 1
        [ $1 -eq $1 ] || return 1
        TRYTOND_CONFIG=$COOG_CONF_TEST
        [ -z $TRYTOND_CONFIG ] && echo missing conf file && return 1
        [ ! -e $TRYTOND_CONFIG ] && echo bad conf file && return 1
        export TRYTOND_CONFIG
        unset DB_NAME
        unset TRYTOND_CACHE_REDIS
        coog_rq_qstart test $COOG_TMP/$COOG_FILE_TEST $1
}

coog_test_exec() { # exec tests - <concurrency> [module*]
        [ -z $1 ] && echo missing workers number && return 1
        [ $1 -eq $1 ] || return 1
        local nb; nb=$1; shift
        coog_test_generate $*
        coog_test_start $nb
}

coog_test_stop() { # stop test workers
        coog_rq_qstop $COOG_TMP/$COOG_FILE_TEST
}

coog_test_status() { # status of current run
        coog_rq_cli info
        echo ""
        echo ""
        echo "Currently running :"
        echo ""
        coog_test_query list wait | grep `date -Idate`
        echo ""
        echo "Failures :"
        echo ""
        coog_test_query list fail | more
}


coog_test_check() { # watch current status live
        watch -n 1 "coog test status"
}

coog_test_query() { # query test redis - [arg*]
        if [ list = "$1" ]
        then
                coog_redis_eval rq redis/test.lua $* | column -t | less
        else
                coog_redis_eval rq redis/test.lua $*
        fi
}

coog_test_log() { # print batch logs
        local args
        local fs
        fs=`ls $COOG_TMP/$COOG_FILE_TEST*.out 2> /dev/null`
        [ $? -ne 0 ] && echo no logs && return
        local f
        for f in $fs
        do
                args="$args $f"
        done
        cat $* $args
}

coog_test_logextract() { # extract job logs <job_id>
        [ -z "$1" ] && echo missing job id && return 1
        local match
        match=$(grep -Hn "$1" "$COOG_TMP/$COOG_FILE_TEST"*.out)
        local nb
        nb=$(echo "$match" | wc -l)
        if [ "$nb" -eq 2 ]
        then
                local f; f=$(echo "$match" | cut -d ":" -f 1)
                local f1; f1=$(echo "$f" | head -1)
                local f2; f2=$(echo "$f" | tail -1)
                [ "$f1" != "$f2" ] && echo "bad job id" && return 1
                local l; l=$(echo "$match" | cut -d ":" -f 2)
                local l1; l1=$(echo "$l" | head -1)
                local l2; l2=$(echo "$l" | tail -1)
                sed -n "$l1,$l2"p "$f1"
        elif [ "$nb" -eq 1 ]
        then
                local f; f=$(echo "$match" | cut -d ":" -f 1)
                local l1; l1=$(echo "$match" | cut -d ":" -f 2)
                local l2
                local m;
                m=$(sed -n "$((l1+1)),\$p" "$f" | grep -n "Moving job to")
                if [ -z "$m" ]
                then
                        l2=$(wc -l "$f" | cut -d " " -f 1)
                else
                        l2=$(echo "$m" | head -1 | cut -d ":" -f 1)
                        l2=$((l2+l1-1))
                fi
                sed -n "$l1,$l2"p "$f"
        else
                echo "bad job id" && return 1
        fi
}

coog_test_logclear() { # clear test logs
        rm -vf $COOG_TMP/$COOG_FILE_TEST*.out
}

coog_test_dropdb() { # drop test db from postgresql server
        local vars
        vars=`python $COOG_BIN/parse-config.py database uri < $COOG_CONF_TEST | python $COOG_BIN/parse-url.py` || return $?
        export PGHOST=`echo "$vars" | sed -n 2p`
        export PGPORT=`echo "$vars" | sed -n 3p`
        export PGUSER=`echo "$vars" | sed -n 4p`
        export PGPASSWORD=`echo "$vars" | sed -n 5p`
        local db
        for db in `psql -lX | grep "test_" | cut -f1 -d "|"`
        do
                dropdb -e $db
        done
}

_coog_test_pull() {
        [ -z "$1" ] && echo "missing branch" && return 1
        coog_code_foreach git fetch -q -p
        coog_code_foreach git checkout -q "$1"
        coog_code_foreach git merge -q --no-edit "origin/$1"
        coog_code_foreach git submodule -q update
        coog_repo_link
}

_coog_test_flake8() {
        flake8 --config="$COOG_COOG/tox.ini" "$1" \
                | grep -vP "modules\/[a-z_]+\/__init__\.py:\d+:\d+: (F403|F405)" \
                | grep -vP "modules\/[a-z_]+\/tests\/__init__\.py:\d+:\d+: F401 '.*suite'"
}

coog_test_flake8() { # check modules code (flake8)
        _coog_test_flake8 "$COOG_COOG/modules"
}

_coog_test_email() {
        local email; email=$1; shift
        local content; content=$1; shift
        local subject; subject=$*
        python "$COOG_BIN/sendemail.py" -fe test@coopengo.com -fn "Test Cron" -te "$email" -s "$subject" < "$content"
        if [ $? -eq 0 ]
        then
                echo "TEST EMAIL: sent $subject to $email"
        else
                echo "TEST EMAIL: failed to send $subject to $email"
        fi
}

coog_test_commit() { # fetch, merge, and test each commit on changed modules (CI) <git branch>
        [ -z "$1" ] && echo "missing branch" && return 1
        echo "TEST COMMIT $1: start @ $(date +'%y-%m-%d %H:%M:%S')"
        local lock
        lock=$COOG_TMP/test-running
        [ -e "$lock" ] && echo "TEST COMMIT $1: leave - running" && return
        touch "$lock"
        local origin
        origin=$(git rev-parse "$1")
        _coog_test_pull "$1"
        for tree in $(git rev-list "$origin..$1")
        do
                echo "TEST COMMIT $1: commit - $tree"
                git checkout -q "$tree"
                local email
                email=$(git log -1 --pretty=tformat:%ae HEAD)
                local fail
                fail=0
                local out
                out=$COOG_TMP/test-$tree
                echo '<pre style="font-family: monospace">' > "$out"
                echo  Flake8 >> "$out"
                for file in $(git diff --name-only HEAD~ | grep "\.py$")
                do
                        local tmp_file
                        tmp_file="$out"-$(basename "$file")
                        if [ -e "$COOG_COOG/$file" ]
                        then
                                _coog_test_flake8 "$COOG_COOG/$file" > "$tmp_file"
                        fi
                        local lines
                        lines=$(wc -l < "$tmp_file")
                        if [ "$lines" -eq 0 ]
                        then
                                echo "check $file ok" >> "$out"
                        else
                                cat "$tmp_file" >> "$out"
                                fail=1
                        fi
                        rm "$tmp_file"
                done
                echo >> "$out"
                for module in $(git diff --name-only HEAD~ | grep "^modules" | cut -d "/" -f 2 | sort | uniq)
                do
                        [ ! -e "$COOG_COOG/modules/$module" ] && continue
                        echo Test "$module" >> "$out"
                        coog_test_manual "$module" &>> "$out"
                        if [ $? -ne 0 ]
                        then
                                fail=1
                        fi
                        echo >> "$out"
                done
                echo '</pre>' >> "$out"
                if [ $fail -eq 0 ]
                then
                        echo "TEST COMMIT $1: commit - $tree - ok"
                        rm "$out"
                else
                        echo "TEST COMMIT $1: commit - $tree - ko"
                        _coog_test_email "$email" "$out" "Test KO for ${tree:0:8}"
                fi
        done
        echo "TEST COMMIT $1: end"
        rm "$lock"
}

coog_test_fullstart() { # starts a full test (CI) <git branch>
        [ -z "$1" ] && echo "missing branch" && return 1
        echo "TEST FULL $1 : start @ $(date +'%y-%m-%d %H:%M:%S')"
        _coog_test_pull "$1"
        shift
        coog_test_exec "$@"
}


coog_test_fullcheck() { # check and report a full test (CI) <git branch>
        [ -z "$1" ] && echo "missing branch" && return 1
        echo "TEST FULL $1: check @ $(date +'%y-%m-%d %H:%M:%S')"
        local a; a=$(coog_test_query count)
        local w; w=$(coog_test_query count "wait")
        [ "$a" -eq 0 ] && echo "TEST FULL $1: no jobs" && return
        [ "$w" -ne 0 ] && echo "TEST FULL $1: running" && return
        local out
        out=$COOG_TMP/test-$(date +'%y%m%d-%H%M%S')
        echo '<pre style="font-family: monospace">' > "$out"
        coog_test_query summary >> "$out"
        local fail
        local subject
        fail=$(coog_test_query "count" "fail")
        if [ "$fail" -ne 0 ]
        then
                subject="Test Report $1: KO"
                echo "TEST FULL $1: end - $fail KO"
                echo >> "$out"
                coog_test_query list fail >> "$out"
                coog_test_query ids fail |
                while IFS= read -r id
                do
                        [ -z "$id" ] && continue
                        echo >> "$out"
                        local log
                        log=$(coog_test_logextract "$id")
                        if [ $? -eq 0 ]
                        then
                                echo "$log" >> "$out"
                        else
                                echo "can not retrieve logs for job: $id" >> "$out"
                        fi
                done
        else
                subject="Test Report $1: OK"
                echo "TEST FULL $1: end - OK"
        fi
        echo '</pre>' >> "$out"
        _coog_test_email dev@coopengo.com "$out" "$subject"
        coog_test_query backup
        coog_test_stop
}
