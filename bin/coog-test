# vim: set ft=sh:
# test management

_coog_test_modules() { # list all linked modules
        for f in $COOG_TRYTOND/trytond/modules/*
        do
                [ -d $f ] && basename $f
        done
}

_coog_test_env() { # set test env
        TRYTOND_CONFIG=$COOG_CONF_TEST
        [ -z $TRYTOND_CONFIG ] && echo "missing conf file" && return 1
        TRYTOND_DATABASE_URI=`python $COOG_BIN/parse-config.py database uri < $COOG_CONF_TEST 2> /dev/null`
        [ $? -ne 0 ] && unset TRYTOND_DATABASE_URI
        unset DB_NAME
}

coog_test_generate() { # generate test jobs - [module*]
        _coog_test_env || return $!
        local modules
        if [ $# -eq 0 ]
        then
                modules=`_coog_test_modules`
        else
                modules=$*
        fi
        python $COOG_BIN/test-generate.py $modules
}

coog_test_start() { # start test workers - <concurrency>
        [ -z $1 ] && echo missing workers number && return 1
        _coog_test_env || return $!
        coog_rq_qstart test $COOG_TMP/$COOG_FILE_TEST $1
}

coog_test_exec() { # exec tests - <concurrency> [module*]
        local nb; nb=$1; shift
        coog_test_generate $*
        coog_test_start $nb
}

coog_test_stop() { # stop test workers
        coog_rq_qstop $COOG_TMP/$COOG_FILE_TEST
}

coog_test_status() { # status of current run
        coog_rq_cli info
        echo ""
        echo ""
        echo "Currently running :"
        echo ""
        coog_test_query list wait | grep `date -Idate`
        echo ""
        echo "Failures :"
        echo ""
        coog_test_query list fail | more
}


coog_test_check() { # watch current status live
        watch -n 1 "coog test status"
}

coog_test_query() { # query test redis - [arg*]
        if [ list = "$1" ]
        then
                coog_redis_eval rq redis/test.lua $* | column -t | less
        else
                coog_redis_eval rq redis/test.lua $*
        fi
}

coog_test_log() { # print batch logs
        local args
        local fs
        fs=`ls $COOG_TMP/$COOG_FILE_TEST*.out 2> /dev/null`
        [ $? -ne 0 ] && echo no logs && return
        local f
        for f in "$fs"
        do
                args="$args $f"
        done
        cat $* $args
}

coog_test_logclear() {
        rm -vf $COOG_TMP/$COOG_FILE_TEST*.out
}

coog_test_dropdb() { # drop test db from postgresql server
        local vars
        vars=`python $COOG_BIN/parse-config.py database uri < $COOG_CONF_TEST | python $COOG_BIN/parse-url.py` || return $?
        export PGHOST=`echo "$vars" | sed -n 2p`
        export PGPORT=`echo "$vars" | sed -n 3p`
        export PGUSER=`echo "$vars" | sed -n 4p`
        export PGPASSWORD=`echo "$vars" | sed -n 5p`
        local db
        for db in `psql -lX | grep "test_" | cut -f1 -d "|"`
        do
                dropdb -e $db
        done
}

coog_test_py() { # launch py.test on a module - <module> - all (further args are fwded to py.test)
        [ $# -eq 0 ] && echo needs module name to test && return
        _coog_test_enter
        local old_wd
        old_wd=`pwd`
        cd $COOG_TRYTOND/trytond/modules
        local module
        module=$1
        shift 1
        if [ ! -d $module ]
        then
                echo module not found && cd $old_wd && return
        fi
        py.test $module --ignore=$module/test_case.py --doctest-glob=scenario*.rst $*
        cd $old_wd
}

coog_test_manual() { # interactively launch tests - <module> - default: all
        _coog_test_env || return $!
        run-tests.py -c $TRYTOND_CONFIG -vv -m $*
}

_coog_test_email() {
        local email; email=$1; shift
        local subject; subject=$1: shift
        local content; content=$1; shift
        echo mailto: $email
        echo subject: $subject
        echo $content
}

coog_test_commits() { # fetch, merge, and test each commit on changed modules
        local lock
        lock=/tmp/test-running
        [ -e $lock ] && echo RUNNING && return
        touch $lock
        local origin
        origin=`git rev-parse master`
        echo SYNC
        coog_code_foreach git fetch -p
        coog_code_foreach git checkout master
        coog_code_foreach git merge origin/master
        coog_code_foreach git submodule update
        for tree in `git rev-list "$origin"..master`
        do
                echo TEST $tree
                git checkout $tree
                local email
                email=`git log -1 --pretty=tformat:%ae HEAD`
                for module in `git diff --stat HEAD~ | grep "\bmodules" | cut -d "/" -f 2 | sort | uniq`
                do
                        echo TEST $tree:$module
                        local out
                        out=/tmp/test-$tree-$module
                        coog_test_manual $module &> $out
                        [ $? -ne 0 ] && _coog_test_email $email $tree-$module:KO $out
                done
        done
        rm $lock
}

coog_test_fullstart() { # starts a full test
        coog_code_foreach git fetch -p
        coog_code_foreach git checkout master
        coog_code_foreach git merge origin/master
        coog_code_foreach git submodule update
        coog_test_exec $*
}

coog_test_fullcheck() { # check and report a full test
        local wait
        wait=`coog_test_query count wait`
        [ $wait -gt 0 ] && return
        local out
        out=test-`date +"%H:%M:%S"`
        coog_test_query summary > $out
        echo >> $out
        coog_test_query list > $out
        local fail
        fail=`coog_test_query count fail`
        _coog_test_email all $fail-KO $out
        coog_test_query clear
}
