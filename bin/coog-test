# vim: set ft=sh:
# test management

coog_test_manual() { # interactively launch tests - <module> - default: all
        unset TRYTOND_CONFIG
        unset DB_NAME
        unset TRYTOND_CACHE_REDIS
        run-tests.py -c $COOG_CONF_TEST -vv -m $*
}

_coog_test_modules() { # list all linked modules
        for f in $COOG_TRYTOND/trytond/modules/*
        do
                [ -d $f ] && basename $f
        done
}

coog_test_generate() { # generate test jobs - [module*]
        local modules
        if [ $# -eq 0 ]
        then
                modules=`_coog_test_modules`
        else
                modules=$*
        fi
        python $COOG_BIN/test-generate.py $modules
}

coog_test_start() { # start test workers - <concurrency>
        [ -z $1 ] && echo missing workers number && return 1
        [ $1 -eq $1 ] || return 1
        TRYTOND_CONFIG=$COOG_CONF_TEST
        [ -z $TRYTOND_CONFIG ] && echo missing conf file && return 1
        [ ! -e $TRYTOND_CONFIG ] && echo bad conf file && return 1
        export TRYTOND_CONFIG
        unset DB_NAME
        unset TRYTOND_CACHE_REDIS
        coog_rq_qstart test $COOG_TMP/$COOG_FILE_TEST $1
}

coog_test_exec() { # exec tests - <concurrency> [module*]
        [ -z $1 ] && echo missing workers number && return 1
        [ $1 -eq $1 ] || return 1
        local nb; nb=$1; shift
        coog_test_generate $*
        coog_test_start $nb
}

coog_test_stop() { # stop test workers
        coog_rq_qstop $COOG_TMP/$COOG_FILE_TEST
}

coog_test_status() { # status of current run
        coog_rq_cli info
        echo ""
        echo ""
        echo "Currently running :"
        echo ""
        coog_test_query list wait | grep `date -Idate`
        echo ""
        echo "Failures :"
        echo ""
        coog_test_query list fail | more
}


coog_test_check() { # watch current status live
        watch -n 1 "coog test status"
}

coog_test_query() { # query test redis - [arg*]
        if [ list = "$1" ]
        then
                coog_redis_eval rq redis/test.lua $* | column -t | less
        else
                coog_redis_eval rq redis/test.lua $*
        fi
}

coog_test_log() { # print batch logs
        local args
        local fs
        fs=`ls $COOG_TMP/$COOG_FILE_TEST*.out 2> /dev/null`
        [ $? -ne 0 ] && echo no logs && return
        local f
        for f in "$fs"
        do
                args="$args $f"
        done
        cat $* $args
}

coog_test_logclear() {
        rm -vf $COOG_TMP/$COOG_FILE_TEST*.out
}

coog_test_dropdb() { # drop test db from postgresql server
        local vars
        vars=`python $COOG_BIN/parse-config.py database uri < $COOG_CONF_TEST | python $COOG_BIN/parse-url.py` || return $?
        export PGHOST=`echo "$vars" | sed -n 2p`
        export PGPORT=`echo "$vars" | sed -n 3p`
        export PGUSER=`echo "$vars" | sed -n 4p`
        export PGPASSWORD=`echo "$vars" | sed -n 5p`
        local db
        for db in `psql -lX | grep "test_" | cut -f1 -d "|"`
        do
                dropdb -e $db
        done
}

_coog_test_email() {
        local email; email=$1; shift
        local content; content=$1; shift
        local subject; subject=$*
        python $COOG_BIN/sendemail.py -fe test@coopengo.com -fn "Test Cron" -te $email -s "$subject" < $content
        if [ $? -eq 0 ]
        then
                echo TEST EMAIL: sent $subject to $email
        else
                echo TEST EMAIL: failed to send $subject to $email
        fi
}

coog_test_commits() { # fetch, merge, and test each commit on changed modules
        echo TEST COMMITS: start @ `date +"%y-%m-%d %H:%M:%S"`
        local lock
        lock=$COOG_TMP/test-running
        [ -e $lock ] && echo TEST COMMITS: leave - running && return
        touch $lock
        local origin
        origin=`git rev-parse master`
        coog_code_foreach git fetch -q -p
        coog_code_foreach git checkout -q master
        coog_code_foreach git merge -q --no-edit origin/master
        coog_code_foreach git submodule -q update
        for tree in `git rev-list "$origin"..master`
        do
                echo TEST COMMITS: commit - $tree
                git checkout -q $tree
                local email
                email=`git log -1 --pretty=tformat:%ae HEAD`
                for module in `git diff --stat HEAD~ | grep "\bmodules" | cut -d "/" -f 2 | sort | uniq`
                do
                        echo TEST COMMITS: module - $module
                        local out
                        local st
                        out=$COOG_TMP/test-$tree-$module
                        echo '<pre style="font-family: monospace">' > $out
                        coog_test_manual $module &>> $out
                        st=$?
                        echo '</pre>' >> $out
                        if [ $st -ne 0 ]
                        then
                                echo TEST COMMITS: test ko
                                _coog_test_email $email $out Test KO for $module after ${tree:0:8}
                        else
                                echo TEST COMMITS: test ok
                        fi
                done
        done
        echo TEST COMMITS: end
        rm $lock
}

coog_test_fullstart() { # starts a full test
        echo TEST FULL: start @ `date +"%y-%m-%d %H:%M:%S"`
        coog_code_foreach git fetch -q -p
        coog_code_foreach git checkout -q master
        coog_code_foreach git merge -q --no-edit origin/master
        coog_code_foreach git submodule -q update
        coog_test_exec $*
}

coog_test_fullcheck() { # check and report a full test
        echo TEST FULL: check @ `date +"%y-%m-%d %H:%M:%S"`
        local a; a=`coog_test_query count`
        local w; w=`coog_test_query count wait`
        [ $a -eq 0 ] && echo TEST FULL: no jobs && return
        [ $w -ne 0 ] && echo TEST FULL: running && return
        local out
        out=$COOG_TMP/test-`date +"%y%m%d-%H%M%S"`
        echo '<pre style="font-family: monospace">' > $out
        coog_test_query summary >> $out
        local fail
        fail=`coog_test_query count fail`
        if [ $fail -ne 0 ]
        then
                echo >> $out
                coog_test_query list fail >> $out
                local head; head=1
                coog_test_query list fail |
                while IFS= read -r f
                do
                        [ $head -eq 1 ] && head=0 && continue
                        echo >> $out
                        local id
                        id=`echo $f | cut -d " " -f 4`
                        coog_test_query show $id >> $out
                done

        fi
        echo '</pre>' >> $out
        echo TEST FULL: end - $fail fails
        _coog_test_email dev@coopengo.com $out Test Report: $fail fails
        coog_test_query backup
        coog_test_stop
}
