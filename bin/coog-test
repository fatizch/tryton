# vim: set ft=sh:
# test management

_coog_test_flake8() {
    flake8 --count --config="$COOG_COOG/tox.ini" "$1"
}

coog_test_flake8() { # check modules code (flake8)
    _coog_test_flake8 "$COOG_COOG/modules"
}

coog_test_dropdb() { # drop test db from postgresql server
    local vars
    vars=$(python "$COOG_BIN/parse-config.py" database uri < "$COOG_CONF_TEST" | python "$COOG_BIN/parse-url.py") || return $?
    PGHOST=$(echo "$vars" | sed -n 2p); export PGHOST
    PGPORT=$(echo "$vars" | sed -n 3p); export PGPORT
    PGUSER=$(echo "$vars" | sed -n 4p); export PGUSER
    PGPASSWORD=$(echo "$vars" | sed -n 5p); export PGPASSWORD
    for db in $(psql -lX | grep "test_" | cut -f1 -d "|")
    do
        dropdb -e "$db"
    done
}

coog_test_manual() { # interactively launch tests - [module *]
    if [ "$1" = bin ]
    then
        python -m pytest -v --ignore="$COOG_COOG/bin/lib/tryton_test.py"
        return
    fi
    unset TRYTOND_CONFIG
    unset DB_NAME
    unset TRYTOND_CACHE_CLASS

    local forced
    local result
    forced=$DB_CACHE
    [ -z "$DB_CACHE" ] && DB_CACHE="$COOG_TMP/coog-test-manual-db-cache"
    coog_server_clearcache
    run-tests.py -c "$COOG_CONF_TEST" -vv -m "$@"
    result=$?

    [ -z "$forced" ] && rm -rf "$DB_CACHE"
    return $result
}

_coog_test_modules() { # list all linked modules
    for f in $COOG_TRYTOND/trytond/modules/*
    do
        [ -d "$f" ] && basename "$f"
    done
}

coog_test_query() { # query test redis - [arg*]
    coog_redis_eval rq "$@"
}

coog_test_generate() { # generate test jobs - [module *]
    if [ $# -eq 0 ]
    then
        _coog_test_modules | xargs python "$COOG_BIN/test-generate.py"
    else
        python "$COOG_BIN/test-generate.py" "$@"
    fi
}

coog_test_join() { # wait for tests execution
    while true
    do
        # Check status once per minute
        sleep 60
        local queued; queued=$(coog_rq_queued test) || return $?
        [ "$queued" -eq 0 ] && break
        echo -en "\rwait @ $(date +'%H:%M:%S') - $queued"
    done
    echo
    local failed; failed=$(coog_test_query "fail" test | grep -c "\w")
    [ "$failed" -eq 0 ] && echo "test succeeded" && return 0
    echo "test failed ($failed)" && return 1
}

coog_test_convert() { # convert test scenarios from python to rst
    for i in $(find "$COOG_COOG/modules/${1:-}" -name "scenario*.py")
    do
        "$COOG_COOG"/misc/python_scripts/test_converter.py "$i" "${i::-2}"rst
    done
}
