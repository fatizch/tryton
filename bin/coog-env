# vim: set ft=sh:
# environment informations

_coog_env_python() { # set python vars
        export PYTHONUNBUFFERED=1
}

_coog_env_files() { # set file names
        COOG_FILE_CLI=coog-cli-$USER
        COOG_FILE_SRV=coog-srv-$USER
        COOG_FILE_WRK=coog-wrk-$USER
        COOG_FILE_RQ=coog-rq-$USER
        COOG_FILE_CEL=coog-cel-$USER
        COOG_FILE_BAT=coog-bat-$USER
        if [ ! -z $VIRTUAL_ENV ]
        then
                local venv
                venv=`basename $VIRTUAL_ENV`
                COOG_FILE_CLI=$COOG_FILE_CLI-$venv
                COOG_FILE_SRV=$COOG_FILE_SRV-$venv
                COOG_FILE_WRK=$COOG_FILE_WRK-$venv
                COOG_FILE_RQ=$COOG_FILE_RQ-$venv
                COOG_FILE_CEL=$COOG_FILE_CEL-$venv
                COOG_FILE_BAT=$COOG_FILE_BAT-$venv
        else
                echo warn: running outside a virtual env
        fi
}

_coog_env_paths() { # set paths
        [ -z $COOG_TMP ] && COOG_TMP=/tmp
        COOG_ROOT=`readlink -f ../..`
        COOG_TRYTON=$COOG_ROOT/tryton
        COOG_TRYTOND=$COOG_ROOT/trytond
        COOG_PROTEUS=$COOG_ROOT/proteus
        COOG_CONF=$COOG_ROOT/conf
        COOG_DOCKER=$COOG_ROOT/docker
        COOG_LIB=`readlink -f ./lib`
}

_coog_env_conf() { # set conf vars
        COOG_CONF_CLI="$COOG_CONF/tryton.conf"
        COOG_CONF_SRV="$COOG_CONF/trytond.conf"
        COOG_CONF_BAT="$COOG_CONF/batch.conf"
        COOG_CONF_TEST="$COOG_CONF/test.conf"
        COOG_CONF_LOG="$COOG_CONF/logging.conf"
}

_coog_env_postgres() { # set postgres vars
        local db_conf
        db_conf=`python2 .py/parse-config.py database uri < $COOG_CONF_SRV | python2 .py/parse-url.py` || return $?
        PGHOST=`echo "$db_conf" | sed -n 2p`
        [ ! -z $PGHOST ] && export PGHOST
        PGPORT=`echo "$db_conf" | sed -n 3p`
        [ ! -z $PGPORT ] && export PGPORT
        PGUSER=`echo "$db_conf" | sed -n 4p`
        [ ! -z $PGUSER ] && export PGUSER
        PGPASSWORD=`echo "$db_conf" | sed -n 5p`
        [ ! -z $PGPASSWORD ] && export PGPASSWORD
        PGDATABASE=`echo "$db_conf" | sed -n 6p`
        [ ! -z $PGDATABASE ] && export PGDATABASE
        return 0
}

_coog_env_common() { # set common vars
        LOG_LEVEL=`python2 .py/parse-config.py logger_root level < $COOG_CONF_LOG` || return $?
        [ ! -z $LOG_LEVEL ] && export LOG_LEVEL
        return 0
}

_coog_env_server() { # set server vars
        export PYTHONPATH="$COOG_LIB:$COOG_TRYTOND:$COOG_PROTEUS:$PYTHONPATH"
        TRYTOND_CONFIG="$COOG_CONF_SRV"
        [ ! -z $TRYTOND_CONFIG ] && export TRYTOND_CONFIG
        DB_NAME=`python2 .py/parse-config.py database uri < $COOG_CONF_SRV | python2 .py/parse-url.py | sed -n 6p` || return $?
        [ ! -z $DB_NAME ] && export DB_NAME
        TRYTOND_CACHE_REDIS=`python2 .py/parse-config.py cache redis < $COOG_CONF_SRV 2> /dev/null`
        [ ! -z $TRYTOND_CACHE_REDIS ] && export TRYTOND_CACHE_REDIS
        TRYTOND_ASYNC_RQ=`python2 .py/parse-config.py async rq < $COOG_CONF_SRV 2> /dev/null`
        [ ! -z $TRYTOND_ASYNC_RQ ] && export TRYTOND_ASYNC_RQ
        TRYTOND_ASYNC_CELERY=`python2 .py/parse-config.py async celery < $COOG_CONF_SRV 2> /dev/null`
        [ ! -z $TRYTOND_ASYNC_CELERY ] && export TRYTOND_ASYNC_CELERY
        TRYTOND_PERF_BROKER=`python2 .py/parse-config.py perf broker < $COOG_CONF_SRV 2> /dev/null`
        [ ! -z $TRYTOND_PERF_BROKER ] && export TRYTOND_PERF_BROKER
        return 0
}

_coog_env_batch() { # set batch vars
        TRYTOND_BATCH_CONFIG="$COOG_CONF_BAT"
        [ ! -z $TRYTOND_BATCH_CONFIG ] && export TRYTOND_BATCH_CONFIG
        return 0
}

coog_env_init() { # set coog vars
        _coog_env_python &&
                _coog_env_files &&
                _coog_env_paths &&
                _coog_env_conf &&
                _coog_env_postgres &&
                _coog_env_common &&
                _coog_env_server &&
                _coog_env_batch
}

coog_env_main() { # print meaningful vars for coog execution
        echo Environment variables:
        echo
        echo "  Local variables"
        echo "    COOG_FILE_CLI          "$COOG_FILE_CLI
        echo "    COOG_FILE_SRV          "$COOG_FILE_SRV
        echo "    COOG_FILE_WRK          "$COOG_FILE_WRK
        echo "    COOG_FILE_RQ           "$COOG_FILE_RQ
        echo "    COOG_FILE_CEL          "$COOG_FILE_CEL
        echo "    COOG_FILE_BAT          "$COOG_FILE_BAT
        echo "    COOG_TMP               "$COOG_TMP
        echo "    COOG_ROOT              "$COOG_ROOT
        echo "    COOG_TRYTON            "$COOG_TRYTON
        echo "    COOG_TRYTOND           "$COOG_TRYTOND
        echo "    COOG_PROTEUS           "$COOG_PROTEUS
        echo "    COOG_CONF              "$COOG_CONF
        echo "    COOG_DOCKER            "$COOG_DOCKER
        echo "    COOG_LIB               "$COOG_LIB
        echo "    COOG_CONF_CLI          "$COOG_CONF_CLI
        echo "    COOG_CONF_SRV          "$COOG_CONF_SRV
        echo "    COOG_CONF_BAT          "$COOG_CONF_BAT
        echo "    COOG_CONF_TEST         "$COOG_CONF_TEST
        echo "    COOG_CONF_LOG          "$COOG_CONF_LOG
        echo
        echo "  Exported variables"
        echo "    PYTHONUNBUFFERED       "$PYTHONUNBUFFERED
        echo "    PYTHONPATH             "$PYTHONPATH
        echo "    PGHOST                 "$PGHOST
        echo "    PGPORT                 "$PGPORT
        echo "    PGUSER                 "$PGUSER
        echo "    PGPASSWORD             "$PGPASSWORD
        echo "    PGDATABASE             "$PGDATABASE
        echo "    LOG_LEVEL              "$LOG_LEVEL
        echo "    TRYTOND_CONFIG         "$TRYTOND_CONFIG
        echo "    DB_NAME                "$DB_NAME
        echo "    TRYTOND_CACHE_REDIS    "$TRYTOND_CACHE_REDIS
        echo "    TRYTOND_ASYNC_RQ       "$TRYTOND_ASYNC_RQ
        echo "    TRYTOND_ASYNC_CELERY   "$TRYTOND_ASYNC_CELERY
        echo "    TRYTOND_PERF_BROKER    "$TRYTOND_PERF_BROKER
        echo "    TRYTOND_BATCH_CONFIG   "$TRYTOND_BATCH_CONFIG
}

coog_env_python() { # launches python in coog context
        python2 $*
}
