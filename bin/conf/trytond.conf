#######
# Web #
#######
[web]
# listen: The url the tryton server will listen on
# default: localhost:8000
listen = localhost:8000

# root: The place where sao will be available if needed
# Can be overriden with $TRYTOND_WEB_ROOT
# example: root = /usr/local/lib/sao

# (trytond-bench) bench: the place where the benchmark UI files are available
# Can be overriden with $TRYTOND_WEB_BENCH

# hostname: The hostname to which the server will respond
# default: *

# (coog_core) log_time_threshold: If set, the performance debug mode is used.
# Server logs will display the timed version of each rpc call, rather than
# their content. A call whose value exceeds this limit (in seconds) will be
# printed at INFO level, other as DEBUG
# example: log_time_threshold = 0.1

# (coog_core) format_parameters_logs: If True, the parameters of RPC calls will
# be pretty-printed if logging is in DEBUG model
# default: False
format_parameters_logs = True

# (coog_core) format_result_logs: If True, the response of RPC calls will be
# pretty-printed if logging is in DEBUG model
# default: False
format_result_logs = True

####################
# Database Section #
####################
[database]
# uri: The database url that will be used by the server. The pattern is:
#
#     <db_type>://<username>:<password>@<host>:<port>/<db_name>
#
# So for a postgresql instance:
#
#     postgresql://tryton:tryton@localhost:5432/my_db_name
#
# Note the that "db_name" part is optionnal. Setting one will make the server
# initializing the pool for this database on startup, rather than waiting for
# an incoming connection
#
# default: sqlite://
uri = postgresql://postgres:postgres@localhost:5432/coog

# language: The default language for the database, which is used to store
# translatable entries in the main tables columns
# default: en
language = fr

# retry: The number of retries of the Tryton Server when there are errors
# in a request to the database
# default: 5

# path : the path to the directory where the Tryton Server stores files.
# The server must have write permissions to this directory.
# (Internal default: /var/lib/trytond)
# path = /var/lib/tryton

# (coog_core) env_name: The string that will be used in the client to identify
# the running environnment. Can use %{DB} to reuse the database name.
# example: Coog - %{DB}

# (coog_core) color: It is possible to set the background color for the client
# depending on the database. That can be done by defining a key with the
# database name in the database section, and the hex value of the color as
# value
# example: my_database = 00FF00

# class: The class that will be used to manage File stores.
# default: trytond.filestore.Filestore

# minconn: The minimum number of connections in the connection pool that will
# be used by tryton
# default: 1

# maxconn: The maximum number of connections in the connection pool that will
# be used by tryton
# default: 64

#######
# SSL #
#######
[ssl]
# private_key: The path to the ssl private key
# privatekey = /etc/ssl/private/ssl-mysite.key

# certificate: The path to the ssl certificate
# certificate = /etc/ssl/certs/ssl-mysite.pem

###########
# Session #
###########
[session]
# super_pwd: The server administration password used by the client for
# the execution of database management tasks. It is encrypted
# using using the Unix crypt(3) routine. A password can be
# generated using the following command line (on one line):
#
#     python -c 'import getpass,crypt,random,string; \
#        print crypt.crypt(getpass.getpass(), \
#        "".join(random.sample(string.ascii_letters + string.digits, 8)))'
# Example password with 'admin': jkUbZGvFNeugk
# default: empty
super_pwd =

# timeout: The time (in seconds) until an inactive session expires
# default: 3600

# max_attempt: The number of time a user can try to access its account before
# an administrator has to unlock it
# default: 5

# authentications: The authentications methods to use for login. New methods
# can be added by custom modules. Typically, the ldap module allows to use the
# "ldap" method. If multiple modes are allowed, they must be separated using a
# comma
# example: password,ldap
# default: password

# use redis as a session store
# default behaviour: no redis (session is stored on database)
# Example : redis = redis://localhost:6379/3

# make it possible for a user to have more than an active session
# it works only when redis is active
# default behaviour: exclusive = True
exclusive = True

############
# Password #
############
[password]
# length: The minimum size of the password
# default: 8

# entropy: The minimum entropy (i.e. complexity) for the password. Calculated
# as the number of distinct letters divided by the length of the password
# default: 0.75

# forbidden: the folder in which the 'forbidden.txt' file can be found. This
# file contains a list of "forbidden" passwords
# default: empty

#########
# Email #
#########
[email]
# uri: The URI to connect to the SMTP server.
# Available protocols are:
# - smtp: simple SMTP
# - smtp+tls: SMTP with STARTTLS
# - smtps: SMTP with SSL
# default: smtp://localhost:25

# from: The From address used by the Tryton Server to send emails.
# default: tryton@localhost

#########
# Cache #
#########
[cache]
# model: The number of models whose values will be kept in the cache
# default: 200

# record: The number of records for a given model which will be kept in the
# cache at a given time. Consider increasing it if your code may manipulate
# record lists whose size is greater than this value
# default: 2000
record = 10000

# field: The number of field per records whose values will be kept in the cache
# Should probably be enough, since a model with more than 100 fields seems a
# problem in itself
# default: 100

# (coog_core) class: The class that will be used as a cache holder. Possible
# values are:
#     trytond.cache.MemoryCache: Basic in memory cache
#     trytond.cache.SerializableMemoryCache: Idem, but excluding non
#       serializable data
#     trytond.cache_redis.RedisCache: Distributed cache which uses a redis
#       instance to share cache information across trytond processes
# Can be overriden with $TRYTOND_CACHE_CLASS
# default: trytond.cache.SerializableMemoryCache

# (coog_core) clean_timeout: The duration (in seconds) of the validity of
# cached data for (Serializable)MemoryCache
# If set to 0, and the database supports it, it will use the NOTIFY / LISTEN
# pattern through the database to transactionally clean the cache
# default: 300
clean_timeout = 0

# (coog_core) uri: For redis class cache, the uri of the redis instance /
# database to use
# Can be overriden with $TRYTOND_CACHE_URI
# example: redis://localhost:6379/0
uri = redis://localhost:6379/0

# (coog_core) coog_cache_size: The size of the custom redis cache
# default: 1024

# (coog_core) disable_fields_view_get_cache: If True, the views will not be
# stored in the server cache. This is useful to help for development, but
# should NOT be enabled on a production server
# default: False
disable_fields_view_get_cache = True

# (coog_core) enable_auto_read_cache: If True, configuration objects reads will
# be automatically cached when possible
# default: True

# (coog_core) enable_auto_search_cache: If True, configuration objects searches
# will be automatically cached when possible
# default: True

##########
# Report #
##########
[report]
# unoconv: Unoconv parameters for connection to the unoconv service.
# default: pipe,name=trytond;urp;StarOffice.ComponentContext
unoconv = True

# (report_engine) export_root_dir: The place in which generated documents will
# be exported if configured so

#######
# API #
#######
[api]
# (api) offload: If True, API calls will be offloaded to celery. This can be
# useful to leverage multi-core servers for CPU-demanding APIs (simulate...)
# default: False
offload = True

# (api) offload_database: If set, will be used to force a separate database for
# offload calls. This can be useful when offload infrastructure is separated
# from the actual Coog server
# default: not set

# (api) offload_timeout: If set, will be used to raise an error if the offload
# call exceeds this timeout. Can be useful in a development environment in
# order to detect that celery is not started
# default: not set
offload_timeout = 30

##########
# Sentry #
##########
[sentry]
# (coog_core) dsn: The dsn to a sentry instance that can be used to handle
# errors
# Can be overriden with $TRYTOND_SENTRY_DSN

#######################
# Ldap Authentication #
# #####################
[ldap_authentication]
# (ldap) uri: The URI to connect to the LDAP server. Follows RFC-2255.
#   uri = ldap://host:port/dn?attributes?scope?filter?extensions
#
# A basic default URL could look like
# uri = ldap://localhost:389/
# default: not set

# (ldap) bind_pass: The LDAP password tht will be used to bind to the ldap
# server if needed
# default: not set

# (ldap) uid: The UID that will be used for authenticating
# default: uid

# (ldap) create_user: If True, a user allowed to connect through LDAP will have
# a user created automatically in Coog if it does not already exist
# default: False

#######
# Env #
#######
[env]
# (coog_core) testing: Used to mark an environment as a testing environment
# default: False

#######
# TMP #
#######
[tmp]
# (coog_core) folder: Where temporary folder will be created when using file
# locks
# default: /tmp

##############
# Attachment #
##############
[attachment]
# store_prefix: The prefix to prepend to attachments paths in the database
# default: empty

#######
# EDM #
#######
[edm]
# (report_engine) server_shared_folder: The place in which the generated
# documents will be placed by the server
# default: /tmp
server_shared_folder = /tmp

# (report_engine) server_shared_folder: The place from which the client will be
# able to access the server_shared_folder
# example: \\WORKSPACE\shared_files\Coog
client_shared_folder = /tmp
xml_dir = /tmp

########
# BDOC #
########
[bdoc]
# (report_engine_bdoc) export_root_dir: The directory in which generated bdoc
# template files will be stored, relative to the main IO folder of Coog
# default: /export

##############################
# Document API configuration #
##############################
[document_api]
# (document_request) document_token_secret: The secret key that will be used to
# generate the tokens for single-use document input APIs
# default: not set

# (document_request) document_token_expiration_minutes: The duration for which
# a generated token will be valid
# default: 1440


###########
# Options #
###########
[options]
# (country_cog) default_country: The code of the country that will be used by
# default when creating a new party
# default: empty
default_country = FR

# (table) table_dimension: The maximum number of dimensions in the application
# instance. Modifying it requires an update on the table module
# default: 4
table_dimension = 10

# (party_cog) phone_prefix: The default prefix for phone numbers. It will
# automatically added to phone numbers inputs if no international prefix
# already exists
# default: +33

###########
# Version #
###########
[version]
# (coog_core) module: The name of the module whose version will be considered
# the global version of the application
# default: coog_core

#########
# Async #
#########
[async]
# (coog_core) rq: The redis uri that will be used as a message broker for
# asynchronous jobs with rq
# default: empty
rq = redis://localhost:6379/1
#
# (coog_core) celery: The redis uri that will be used as a message broker for
# asynchronous jobs with celery
# default: empty
celery = redis://localhost:6379/2

#########
# Batch #
#########
[batch]
log_dir = /tmp

################
# Sepa Payment #
################
[sepa_payment]
# (account_payment_sepa_cog) out_dir: The place where sepa messages should be
# automatically placed after generation
# default: empty

#########
# Table #
#########
[table]
# The table session is used to map model names to table names in case the
# automatically generated name is not suitable (too long for instance).
# example: party.party = party

#########
# Debug #
#########
[debug]
# (debug) methods: The comma-separated list of methods that will be patched to
# include the model on which they were called in the stack traces
# example: methods = read,search,create

# (debug) fields_methods: The comma-separated list of methods that should be
# patched on fields for better identification in stack traces
# example: fields_methods: get,set

# (debug) auto_profile_threshold: The minimum duration (in seconds) of method
# calls to display if auto_profiling is enabled. Calls that exceed this
# duration will still be profiled, but the result will not be displayed in the
# server log
# default: 0

# (debug) disable_syntax_analysis: If True, the syntax analysis parser will be
# deactivated when starting the server. This is useful to increase performances
# on startup, though the parser can sometimes find interesting errors
# default: False
disable_syntax_analysis = True

# (debug) debug_views: If True, a special view will be accessible on all
# models, which displays all fields in a "developer view"
# default: False

# (debug) ignore_passwords: If True, any password will be accepted for logging
# in. Should obviously never be activated in a real (i.e. not testing)
# environment
# default: False

##################
# Auto-profiling #
##################
[auto_profile]
# (debug) The content of this section should be a list of model names paired
# with a comma-separated list of methods to auto-profile for this model:
# example: party_party = read,write

########
# Perf #
########
[perf]
# (coog_core) broker: The local redis uri that will be used to store perf
# analysis results
# example: redis://127.0.01:6379/15

# (coog_core) users: The comma separated list of users whose actions will be
# analysed
# example: debug

# (coog_core) profile: The name of the rpc call that must be analysed
# example: model.ir.ui.menu.read

# (coog_core) db: The name of the rpc call whose query times will be logged
# example: model.ir.ui.menu.read

# (coog_core) query: The minimum duration of a query to trigger in-depth
# analysis. In seconds
# example: 0.2

#############
# Cryptolog #
#############
[cryptolog]
# (cryptolog) url: The url to the cryptolog service
# (cryptolog) no_verify: If "1", the verification process will be ignored
# (cryptolog) success-url: The callback url for the cryptolog service in case
# of success
# (cryptolog) fail-url: The callback url for the cryptolog service in case
# of failure
# (cryptolog) cancel-url: The callback url for the cryptolog service in case
# of cancellation
# (cryptolog) auth_mode: The authentication mode to connect to cryptolog. The
# only supported value for now is "basic"
# (cryptolog) username: The username to use when connecting to the cryptolog
# service
# (cryptolog) password: The password to use when connecting to the cryptolog
# service

############
# Migrator #
############
[migration]
# (migrator) host: The host of the source database for migrating
# (migrator) user: The user of the source database for migrating
# (migrator) password: The password of the source database for migrating
# (migrator) database: The database name of the source database for migrating
# (migrator) schema: The schema of the source database for migrating

#######
# Bus #
#######
[bus]
# (bus) allow_subscribe: Activate client notifications
allow_subscribe = 1

################
# Batch Report #
################
[batch_report]
# (batch_report) uri: The URI to connect to the SMTP server.
# Available protocols are:
# - smtp: simple SMTP
# - smtp+tls: SMTP with STARTTLS
# - smtps: SMTP with SSL
# no default
uri = smtp://localhost:25

# (batch_report) fromemail: : The From address used to send batch report email.
# no default
# fromemail = coopengo@gmail.com

# (batch_report) toemail: the To address used to send batch report email
# no default
# toemail = batch_report@yopmail.com

# (batch_report) env_name: Tag used to identify the environment the batches has run on
# env_name = Ordinateur Nidhal

# (batch_report) extra_redis: the redis uri for storing batch extra info
# no default
extra_redis = redis://localhost:6379/14

# (batch_report) template: the genshi template used to generate mail
# default (coog_directory)/coog/bin/bin/template/default_batch_template.html
# template = /home/nidhal/workspace/gie/coog/bin/bin/template/default_batch_template.html
