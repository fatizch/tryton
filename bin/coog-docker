# vim: set ft=sh:
# docker utils for coog server

_coog_docker_enter() {
        _coog_docker_wd=`pwd`
        _coog_docker_gd="/tmp/docker-$1-"`date +"%y%m%d-%H%M%S"`
        mkdir $_coog_docker_gd && cd $_
}

_coog_docker_leave() {
        cd $_coog_docker_wd
}

coog_docker_env() { # build docker env image - [docker-build-arg*]
        _coog_docker_enter env
        cp $_coog_docker_wd/conf/env.df Dockerfile
        docker build -t coog/env -f Dockerfile $* .
        _coog_docker_leave
}

_coog_docker_archive() { # archive repo - <repo> <tree>
        local repo; repo=$1
        local tree; tree=$2
        echo $repo:$tree:`git rev-parse $tree` >> "$_coog_docker_gd"/.version
        [ $? -ne 0 ] && echo bad revision $tree from $repo && return 1
        local base; base="$_coog_docker_gd"/"$repo"
        local submodules; submodules=`git submodule | wc -l`
        if [ $submodules -eq 0 ]
        then
                git archive --format tar -o "$base".tar $tree
        else
                local current; current=`git rev-parse --abbrev-ref HEAD`
                [ -z $current ] && echo $repo: branch is $current && return 1
                [ "$current" = HEAD ] && echo $repo: branch is $current && return 1
                local dirty; dirty=`git diff $current | wc -l`
                [ "$dirty" -ne 0 ] && echo repo $repo is not clean && return 1
                git archive --format tar -o "$base".tar $tree
                # need to checkout to get submodules @ right commit
                git checkout $tree
                [ $? -ne 0 ] && echo "checkout $tree ko" && return 1
                git submodule foreach "git archive --prefix="'$path'"/ --format tar -o "$base"-"'$sha1'".tar "'$sha1'
                git submodule foreach "tar A -f "$base".tar "$base"-"'$sha1'".tar"
                git submodule foreach "rm -f "$base"-"'$sha1'".tar"
                git checkout "$current"
        fi
        mkdir $base && tar x -f "$base".tar -C $base && rm "$base".tar
}

coog_docker_build() { # build docker image - [image*] -- [docker-build-arg*]
        [ $# -lt 3 ] && \
                echo needs at least trytond, trytond-modules and coog to build && \
                return 1
        _coog_docker_enter coog
        local ret; ret=0
        local image; image=$1
        while [ ! -z $1 ]
        do
                [ $1 = "--" ] && shift && break
                local component; component=$1; shift
                local repo; repo=`echo $component | cut -d ":" -f 1`
                local tree; tree=`echo $component | cut -d ":" -f 2`
                [ ! -d $COOG_ROOT/$repo ] && echo repo $repo does not exist && ret=1 && break
                local wd; wd=`pwd`
                cd $COOG_ROOT/$repo
                _coog_docker_archive $repo $tree
                ret=$?
                cd "$wd"
                [ $ret -ne 0 ] && break
        done
        if [ $ret -eq 0 ]
        then
                cp $_coog_docker_wd/conf/coog.df Dockerfile
                docker build -t coog/$image -f Dockerfile $* .
        fi
        _coog_docker_leave
}
