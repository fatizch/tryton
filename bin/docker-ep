#!/bin/sh
# docker entrypoint

COOG_ROOT=/opt/coog
COOG_TRYTOND=$COOG_ROOT/trytond

ep_conf_file() {
        echo `readlink -f $COOG_ROOT/coog.conf`
}

ep_data_folder() {
        echo `readlink -f $COOG_ROOT/data`
}

ep_conf_jsonrpc() {
        local file
        file=`ep_conf_file`
        echo "[jsonrpc]" >> $file
        echo "listen = 0.0.0.0:8000" >> $file
}

ep_conf_xmlrpc() {
        local file
        file=`ep_conf_file`
        echo "[xmlrpc]" >> $file
        echo "listen = 0.0.0.0:8069" >> $file
}

ep_conf_database() {
        local file
        file=`ep_conf_file`
        echo "[database]" >> $file
        local db_system
        [ ! -z $COOG_DB_SYS ] && db_system=$COOG_DB_SYS
        [ -z $db_system ] && db_system=postgresql
        local db_host
        [ ! -z $COOG_DB_HOST ] && db_host=$COOG_DB_HOST
        [ -z $db_host ] && \
                [ $db_system = postgresql ] && \
                [ ! -z $POSTGRES_PORT_5432_TCP_ADDR ] && \
                db_host=$POSTGRES_PORT_5432_TCP_ADDR
        [ -z $db_host ] && echo "  no db host defined" && return 1
        local db_port
        [ ! -z $COOG_DB_PORT ] && db_port=$COOG_DB_PORT
        [ -z $db_port ] && \
                [ $db_system = postgresql ] && \
                [ ! -z $POSTGRES_PORT_5432_TCP_PORT ] && \
                db_port=$POSTGRES_PORT_5432_TCP_PORT
        [ -z $db_port ] && \
                [ $db_system = postgresql ] && \
                db_port=5432
        [ -z $db_port ] && echo "  no db port defined" && return 1
        local db_user
        [ ! -z $COOG_DB_USER ] && db_user=$COOG_DB_USER
        [ -z $db_user ] && echo "  no db user defined" && return 1
        local db_password
        [ ! -z $COOG_DB_PASSWORD ] && db_password=$COOG_DB_PASSWORD
        [ -z $db_password ] && echo "  no db password defined" && return 1
        echo "uri = $db_system://$db_user:$db_password@$db_host:$db_port" >> $file
        local db_data
        db_data=`ep_data_folder`
        echo "path = $db_data" >> $file
        [ ! -z $COOG_DB_LANG ] && echo "language = $COOG_DB_LANG" >> $file
        return 0
}

ep_conf_cache() {
        local file
        file=`ep_conf_file`
        echo "[cache]" >> $file
        local cache_host
        [ ! -z $COOG_CACHE_HOST ] && cache_host=$COOG_CACHE_HOST
        [ -z $cache_host ] && \
                [ ! -z $REDIS_PORT_6379_TCP_ADDR ] && \
                cache_host=$REDIS_PORT_6379_TCP_ADDR
        [ -z $cache_host ] && return 0
        local cache_port
        [ ! -z $COOG_CACHE_PORT ] && cache_port=$COOG_CACHE_PORT
        [ -z $cache_port ] && \
                [ ! -z $REDIS_PORT_6379_TCP_PORT ] && \
                cache_port=$REDIS_PORT_6379_TCP_PORT
        [ -z $cache_port ] && cache_port=6379
        local cache_db
        [ ! -z $COOG_CACHE_DB ] && cache_db=$COOG_CACHE_DB
        [ -z $cache_db ] && echo "  no cache db defined" && return 1
        echo "redis = redis://$cache_host:$cache_port/$cache_db" >> $file
}

ep_conf_session() {
        local file
        file=`ep_conf_file`
        echo "[session]" >> $file
        local password
        password=`cat $COOG_ROOT/.password`
        echo "super_pwd = $password" >> $file
}

ep_conf_sentry() {
        local file
        file=`ep_conf_file`
        echo "[sentry]" >> $file
        local sentry_host
        [ ! -z $COOG_SENTRY_HOST ] && sentry_host=$COOG_SENTRY_HOST
        [ -z $sentry_host ] && return 0
        local sentry_protocol
        [ ! -z $COOG_SENTRY_PROTOCOL ] && sentry_protocol=$COOG_SENTRY_PROTOCOL
        [ -z $sentry_protocol ] && sentry_protocol=http
        local sentry_port
        [ ! -z $COOG_SENTRY_PORT ] && sentry_port=$COOG_SENTRY_PORT
        [ -z $sentry_port ] && sentry_port=9000
        local sentry_pub
        [ ! -z $COOG_SENTRY_PUB ] && sentry_pub=$COOG_SENTRY_PUB
        [ -z $sentry_pub ] && echo no sentry dsn pub key defined && return 1
        local sentry_sec
        [ ! -z $COOG_SENTRY_SEC ] && sentry_sec=$COOG_SENTRY_SEC
        [ -z $sentry_sec ] && echo no sentry dsn sec key defined && return 1
        local sentry_project
        [ ! -z $COOG_SENTRY_PROJECT ] && sentry_project=$COOG_SENTRY_PROJECT
        [ -z $sentry_project ] && echo no sentry dsn project defined && return 1
        echo "dsn = $sentry_protocol://$sentry_pub:$sentry_sec@$sentry_host:$sentry_port/$sentry_project" >> $file
}

ep_conf() {
        local file
        file=`ep_conf_file`
        echo "# Coog configuration" > $file
        ep_conf_jsonrpc && \
                ep_conf_xmlrpc && \
                ep_conf_database && \
                ep_conf_cache && \
                ep_conf_session && \
                ep_conf_sentry
}

config() { # print container built config file
        echo Building configuration file...
        ep_conf || ( echo "!!! Failed to build configuration file !!!" && return 1 )
        echo
        echo Built configuration:
        local file
        file=`ep_conf_file`
        cat $file
}

app() { # start Coog app inside container
        echo Welcome on board, Coog is getting started
        echo
        echo Building configuration file...
        ep_conf || ( echo "!!! Failed to build configuration file !!!" && return 1 )
        echo
        echo Staring Coog...
        local file
        file=`ep_conf_file`
        trytond -c $file $*
}

version() { # print image repos versions
        cat $COOG_ROOT/.version
}

dep() {
        . ./coog-dep
        coog_dep_base && coog_dep_extend
}

link() {
        . ./coog-repo
        coog_repo_linkm
}

main() {
        local script_path=`readlink -f $0`
        local script_dir=`dirname $script_path`
        cd $script_dir
        [ "$1" = dep ] && shift && dep $* && return $?
        [ "$1" = link ] && shift && link $* && return $?
        [ "$1" = version ] && shift && version $* && return $?
        [ "$1" = config ] && shift && config $* && return $?
        [ "$1" = app ] && shift && app $* && return $?
}

main $*
